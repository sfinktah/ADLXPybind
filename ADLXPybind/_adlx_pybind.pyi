"""
ADLX python binding for display & displayListChangedEvent
"""
from __future__ import annotations
import collections.abc
import typing
__all__ = ['ADLXGPUHolder', 'ADLXHelper', 'ADLX_ADL_INIT_ERROR', 'ADLX_ALREADY_ENABLED', 'ADLX_ALREADY_INITIALIZED', 'ADLX_BAD_VER', 'ADLX_DISPLAY_CONNECTOR_TYPE', 'ADLX_DISPLAY_SCAN_TYPE', 'ADLX_DISPLAY_TYPE', 'ADLX_FAIL', 'ADLX_INVALID_ARGS', 'ADLX_INVALID_OBJECT', 'ADLX_NOT_FOUND', 'ADLX_NOT_SUPPORTED', 'ADLX_OK', 'ADLX_ORPHAN_OBJECTS', 'ADLX_RESULT', 'ADLX_TERMINATED', 'ADLX_UNKNOWN_INTERFACE', 'DISPLAY_CONTYPE_COMPOSITE', 'DISPLAY_CONTYPE_CVDONGLE_JPN', 'DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN', 'DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC', 'DISPLAY_CONTYPE_CVDONGLE_NTSC', 'DISPLAY_CONTYPE_DISPLAYPORT', 'DISPLAY_CONTYPE_DVI_D', 'DISPLAY_CONTYPE_DVI_I', 'DISPLAY_CONTYPE_EDP', 'DISPLAY_CONTYPE_HDMI_TYPE_A', 'DISPLAY_CONTYPE_HDMI_TYPE_B', 'DISPLAY_CONTYPE_RCA_3COMPONENT', 'DISPLAY_CONTYPE_SVIDEO', 'DISPLAY_CONTYPE_UNKNOWN', 'DISPLAY_CONTYPE_USB_TYPE_C', 'DISPLAY_CONTYPE_VGA', 'DISPLAY_CONTYPE_WIRELESSDISPLAY', 'DISPLAY_TYPE_COMPONENT_VIDEO', 'DISPLAY_TYPE_DIGITAL_FLAT_PANEL', 'DISPLAY_TYPE_LCD_PANEL', 'DISPLAY_TYPE_MONITOR', 'DISPLAY_TYPE_PROJECTOR', 'DISPLAY_TYPE_TELEVISION', 'DISPLAY_TYPE_UNKOWN', 'DisplayListCallBack', 'GPUIterator', 'IADLXDisplay', 'IADLXDisplayChangedHandling', 'IADLXDisplayServices', 'IADLXGPU', 'IADLXGPUList', 'IADLXGPUListFacade', 'IADLXGPUMetrics', 'IADLXGPUMetrics2', 'IADLXGPUMetricsSupport', 'IADLXGPUMetricsSupport2', 'IADLXPerformanceMonitoringServices', 'IADLXSystem', 'IID_IADLXGPUMetrics2', 'IID_IADLXGPUMetricsSupport2', 'INTERLACED', 'PROGRESSIVE']
class ADLXGPUHolder:
    def __init__(self, arg0: ...) -> None:
        ...
    def getGPU(self) -> ...:
        ...
    def getGPUList(self) -> IADLXGPUList:
        ...
    def isValid(self) -> bool:
        ...
class ADLXHelper:
    def GetAdlMapping(self) -> ...:
        ...
    def GetSystemServices(self) -> ...:
        ...
    def Initialize(self) -> ADLX_RESULT:
        ...
    def InitializeWithCallerAdl(self, arg0: typing_extensions.CapsuleType, arg1: ...) -> ADLX_RESULT:
        ...
    def InitializeWithIncompatibleDriver(self) -> ADLX_RESULT:
        ...
    def QueryVersion(self) -> str:
        ...
    def Terminate(self) -> ADLX_RESULT:
        ...
    def __init__(self) -> None:
        ...
class ADLX_DISPLAY_CONNECTOR_TYPE:
    """
    Members:
    
      DISPLAY_CONTYPE_UNKNOWN
    
      DISPLAY_CONTYPE_VGA
    
      DISPLAY_CONTYPE_DVI_D
    
      DISPLAY_CONTYPE_DVI_I
    
      DISPLAY_CONTYPE_CVDONGLE_NTSC
    
      DISPLAY_CONTYPE_CVDONGLE_JPN
    
      DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN
    
      DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC
    
      DISPLAY_CONTYPE_HDMI_TYPE_A
    
      DISPLAY_CONTYPE_HDMI_TYPE_B
    
      DISPLAY_CONTYPE_SVIDEO
    
      DISPLAY_CONTYPE_COMPOSITE
    
      DISPLAY_CONTYPE_RCA_3COMPONENT
    
      DISPLAY_CONTYPE_DISPLAYPORT
    
      DISPLAY_CONTYPE_EDP
    
      DISPLAY_CONTYPE_WIRELESSDISPLAY
    
      DISPLAY_CONTYPE_USB_TYPE_C
    """
    DISPLAY_CONTYPE_COMPOSITE: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_COMPOSITE: 12>
    DISPLAY_CONTYPE_CVDONGLE_JPN: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_JPN: 5>
    DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN: 6>
    DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC: 7>
    DISPLAY_CONTYPE_CVDONGLE_NTSC: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NTSC: 4>
    DISPLAY_CONTYPE_DISPLAYPORT: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DISPLAYPORT: 14>
    DISPLAY_CONTYPE_DVI_D: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DVI_D: 2>
    DISPLAY_CONTYPE_DVI_I: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DVI_I: 3>
    DISPLAY_CONTYPE_EDP: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_EDP: 15>
    DISPLAY_CONTYPE_HDMI_TYPE_A: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_HDMI_TYPE_A: 9>
    DISPLAY_CONTYPE_HDMI_TYPE_B: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_HDMI_TYPE_B: 10>
    DISPLAY_CONTYPE_RCA_3COMPONENT: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_RCA_3COMPONENT: 13>
    DISPLAY_CONTYPE_SVIDEO: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_SVIDEO: 11>
    DISPLAY_CONTYPE_UNKNOWN: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_UNKNOWN: 0>
    DISPLAY_CONTYPE_USB_TYPE_C: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_USB_TYPE_C: 17>
    DISPLAY_CONTYPE_VGA: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_VGA: 1>
    DISPLAY_CONTYPE_WIRELESSDISPLAY: typing.ClassVar[ADLX_DISPLAY_CONNECTOR_TYPE]  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_WIRELESSDISPLAY: 16>
    __members__: typing.ClassVar[dict[str, ADLX_DISPLAY_CONNECTOR_TYPE]]  # value = {'DISPLAY_CONTYPE_UNKNOWN': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_UNKNOWN: 0>, 'DISPLAY_CONTYPE_VGA': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_VGA: 1>, 'DISPLAY_CONTYPE_DVI_D': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DVI_D: 2>, 'DISPLAY_CONTYPE_DVI_I': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DVI_I: 3>, 'DISPLAY_CONTYPE_CVDONGLE_NTSC': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NTSC: 4>, 'DISPLAY_CONTYPE_CVDONGLE_JPN': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_JPN: 5>, 'DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN: 6>, 'DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC: 7>, 'DISPLAY_CONTYPE_HDMI_TYPE_A': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_HDMI_TYPE_A: 9>, 'DISPLAY_CONTYPE_HDMI_TYPE_B': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_HDMI_TYPE_B: 10>, 'DISPLAY_CONTYPE_SVIDEO': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_SVIDEO: 11>, 'DISPLAY_CONTYPE_COMPOSITE': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_COMPOSITE: 12>, 'DISPLAY_CONTYPE_RCA_3COMPONENT': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_RCA_3COMPONENT: 13>, 'DISPLAY_CONTYPE_DISPLAYPORT': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DISPLAYPORT: 14>, 'DISPLAY_CONTYPE_EDP': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_EDP: 15>, 'DISPLAY_CONTYPE_WIRELESSDISPLAY': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_WIRELESSDISPLAY: 16>, 'DISPLAY_CONTYPE_USB_TYPE_C': <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_USB_TYPE_C: 17>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class ADLX_DISPLAY_SCAN_TYPE:
    """
    Members:
    
      PROGRESSIVE
    
      INTERLACED
    """
    INTERLACED: typing.ClassVar[ADLX_DISPLAY_SCAN_TYPE]  # value = <ADLX_DISPLAY_SCAN_TYPE.INTERLACED: 1>
    PROGRESSIVE: typing.ClassVar[ADLX_DISPLAY_SCAN_TYPE]  # value = <ADLX_DISPLAY_SCAN_TYPE.PROGRESSIVE: 0>
    __members__: typing.ClassVar[dict[str, ADLX_DISPLAY_SCAN_TYPE]]  # value = {'PROGRESSIVE': <ADLX_DISPLAY_SCAN_TYPE.PROGRESSIVE: 0>, 'INTERLACED': <ADLX_DISPLAY_SCAN_TYPE.INTERLACED: 1>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class ADLX_DISPLAY_TYPE:
    """
    Members:
    
      DISPLAY_TYPE_UNKOWN
    
      DISPLAY_TYPE_MONITOR
    
      DISPLAY_TYPE_TELEVISION
    
      DISPLAY_TYPE_LCD_PANEL
    
      DISPLAY_TYPE_DIGITAL_FLAT_PANEL
    
      DISPLAY_TYPE_COMPONENT_VIDEO
    
      DISPLAY_TYPE_PROJECTOR
    """
    DISPLAY_TYPE_COMPONENT_VIDEO: typing.ClassVar[ADLX_DISPLAY_TYPE]  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_COMPONENT_VIDEO: 5>
    DISPLAY_TYPE_DIGITAL_FLAT_PANEL: typing.ClassVar[ADLX_DISPLAY_TYPE]  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_DIGITAL_FLAT_PANEL: 4>
    DISPLAY_TYPE_LCD_PANEL: typing.ClassVar[ADLX_DISPLAY_TYPE]  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_LCD_PANEL: 3>
    DISPLAY_TYPE_MONITOR: typing.ClassVar[ADLX_DISPLAY_TYPE]  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_MONITOR: 1>
    DISPLAY_TYPE_PROJECTOR: typing.ClassVar[ADLX_DISPLAY_TYPE]  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_PROJECTOR: 6>
    DISPLAY_TYPE_TELEVISION: typing.ClassVar[ADLX_DISPLAY_TYPE]  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_TELEVISION: 2>
    DISPLAY_TYPE_UNKOWN: typing.ClassVar[ADLX_DISPLAY_TYPE]  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_UNKOWN: 0>
    __members__: typing.ClassVar[dict[str, ADLX_DISPLAY_TYPE]]  # value = {'DISPLAY_TYPE_UNKOWN': <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_UNKOWN: 0>, 'DISPLAY_TYPE_MONITOR': <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_MONITOR: 1>, 'DISPLAY_TYPE_TELEVISION': <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_TELEVISION: 2>, 'DISPLAY_TYPE_LCD_PANEL': <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_LCD_PANEL: 3>, 'DISPLAY_TYPE_DIGITAL_FLAT_PANEL': <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_DIGITAL_FLAT_PANEL: 4>, 'DISPLAY_TYPE_COMPONENT_VIDEO': <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_COMPONENT_VIDEO: 5>, 'DISPLAY_TYPE_PROJECTOR': <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_PROJECTOR: 6>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class ADLX_RESULT:
    """
    Members:
    
      ADLX_OK
    
      ADLX_ALREADY_ENABLED
    
      ADLX_ALREADY_INITIALIZED
    
      ADLX_FAIL
    
      ADLX_INVALID_ARGS
    
      ADLX_BAD_VER
    
      ADLX_UNKNOWN_INTERFACE
    
      ADLX_TERMINATED
    
      ADLX_ADL_INIT_ERROR
    
      ADLX_NOT_FOUND
    
      ADLX_INVALID_OBJECT
    
      ADLX_ORPHAN_OBJECTS
    
      ADLX_NOT_SUPPORTED
    """
    ADLX_ADL_INIT_ERROR: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_ADL_INIT_ERROR: 8>
    ADLX_ALREADY_ENABLED: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_ALREADY_ENABLED: 1>
    ADLX_ALREADY_INITIALIZED: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_ALREADY_INITIALIZED: 2>
    ADLX_BAD_VER: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_BAD_VER: 5>
    ADLX_FAIL: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_FAIL: 3>
    ADLX_INVALID_ARGS: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_INVALID_ARGS: 4>
    ADLX_INVALID_OBJECT: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_INVALID_OBJECT: 10>
    ADLX_NOT_FOUND: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_NOT_FOUND: 9>
    ADLX_NOT_SUPPORTED: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_NOT_SUPPORTED: 12>
    ADLX_OK: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_OK: 0>
    ADLX_ORPHAN_OBJECTS: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_ORPHAN_OBJECTS: 11>
    ADLX_TERMINATED: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_TERMINATED: 7>
    ADLX_UNKNOWN_INTERFACE: typing.ClassVar[ADLX_RESULT]  # value = <ADLX_RESULT.ADLX_UNKNOWN_INTERFACE: 6>
    __members__: typing.ClassVar[dict[str, ADLX_RESULT]]  # value = {'ADLX_OK': <ADLX_RESULT.ADLX_OK: 0>, 'ADLX_ALREADY_ENABLED': <ADLX_RESULT.ADLX_ALREADY_ENABLED: 1>, 'ADLX_ALREADY_INITIALIZED': <ADLX_RESULT.ADLX_ALREADY_INITIALIZED: 2>, 'ADLX_FAIL': <ADLX_RESULT.ADLX_FAIL: 3>, 'ADLX_INVALID_ARGS': <ADLX_RESULT.ADLX_INVALID_ARGS: 4>, 'ADLX_BAD_VER': <ADLX_RESULT.ADLX_BAD_VER: 5>, 'ADLX_UNKNOWN_INTERFACE': <ADLX_RESULT.ADLX_UNKNOWN_INTERFACE: 6>, 'ADLX_TERMINATED': <ADLX_RESULT.ADLX_TERMINATED: 7>, 'ADLX_ADL_INIT_ERROR': <ADLX_RESULT.ADLX_ADL_INIT_ERROR: 8>, 'ADLX_NOT_FOUND': <ADLX_RESULT.ADLX_NOT_FOUND: 9>, 'ADLX_INVALID_OBJECT': <ADLX_RESULT.ADLX_INVALID_OBJECT: 10>, 'ADLX_ORPHAN_OBJECTS': <ADLX_RESULT.ADLX_ORPHAN_OBJECTS: 11>, 'ADLX_NOT_SUPPORTED': <ADLX_RESULT.ADLX_NOT_SUPPORTED: 12>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class DisplayListCallBack:
    call: collections.abc.Callable[[collections.abc.Sequence[IADLXDisplay]], bool]
    def __init__(self) -> None:
        ...
class GPUIterator:
    def __iter__(self) -> GPUIterator:
        ...
    def __next__(self) -> ...:
        ...
class IADLXDisplay:
    def EDID(self) -> str:
        ...
    def GetGPU(self) -> ...:
        ...
    def ManufacturerID(self) -> int:
        ...
    def PixelClock(self) -> int:
        ...
    def RefreshRate(self) -> float:
        ...
    def ScanType(self) -> ADLX_DISPLAY_SCAN_TYPE:
        ...
    def UniqueId(self) -> int:
        ...
    def __init__(self) -> None:
        ...
    def connectType(self) -> ADLX_DISPLAY_CONNECTOR_TYPE:
        ...
    def name(self) -> str:
        ...
    def resolution(self) -> tuple[int, int]:
        ...
    def type(self) -> ADLX_DISPLAY_TYPE:
        ...
class IADLXDisplayChangedHandling:
    def AddDisplayListEventListener(self, arg0: DisplayListCallBack) -> ADLX_RESULT:
        ...
    def RemoveDisplayListEventListener(self, arg0: DisplayListCallBack) -> ADLX_RESULT:
        ...
    def __init__(self) -> None:
        ...
class IADLXDisplayServices:
    def GetDisplayChangedHandling(self) -> ...:
        ...
    def GetDisplays(self) -> list[...]:
        ...
    def GetNumberOfDisplays(self) -> int:
        ...
    def __init__(self) -> None:
        ...
class IADLXGPU:
    def ASICFamilyType(self) -> ADLX_ASIC_FAMILY_TYPE:
        ...
    def DriverPath(self) -> str:
        ...
    def HasDesktops(self) -> bool:
        ...
    def IsExternal(self) -> bool:
        ...
    def Name(self) -> str:
        ...
    def PNPString(self) -> str:
        ...
    def TotalVRAM(self) -> int:
        ...
    def Type(self) -> ADLX_GPU_TYPE:
        ...
    def VRAMType(self) -> str:
        ...
    def VendorId(self) -> str:
        ...
    def __init__(self) -> None:
        ...
class IADLXGPUList:
    def At(self, arg0: typing.SupportsInt) -> ...:
        ...
    def Begin(self) -> int:
        ...
    def Clear(self) -> ADLX_RESULT:
        ...
    def Empty(self) -> bool:
        ...
    def End(self) -> int:
        ...
    def Remove_Back(self) -> ADLX_RESULT:
        ...
    def Size(self) -> int:
        ...
    def __init__(self) -> None:
        ...
    def __iter__(self) -> collections.abc.Iterator[...]:
        ...
    def __len__(self) -> int:
        ...
class IADLXGPUMetrics:
    def GPUClockSpeed(self) -> int:
        ...
    def GPUFanSpeed(self) -> int:
        ...
    def GPUHotspotTemperature(self) -> float:
        ...
    def GPUIntakeTemperature(self) -> float:
        ...
    def GPUPower(self) -> float:
        ...
    def GPUSharedMemory(self) -> typing.Any:
        ...
    def GPUTemperature(self) -> float:
        ...
    def GPUTotalBoardPower(self) -> float:
        ...
    def GPUUsage(self) -> float:
        ...
    def GPUVRAM(self) -> int:
        ...
    def GPUVRAMClockSpeed(self) -> int:
        ...
    def GPUVoltage(self) -> int:
        ...
    def QueryInterface(self, arg0: str) -> None:
        ...
    def Release(self) -> int:
        ...
    def TimeStamp(self) -> int:
        ...
    def __init__(self) -> None:
        ...
class IADLXGPUMetrics2:
    def GPUSharedMemory(self) -> int:
        ...
class IADLXGPUMetricsSupport:
    def GetGPUClockSpeedRange(self) -> tuple:
        ...
    def GetGPUFanSpeedRange(self) -> tuple:
        ...
    def GetGPUHotspotTemperatureRange(self) -> tuple:
        ...
    def GetGPUIntakeTemperatureRange(self) -> tuple:
        ...
    def GetGPUPowerRange(self) -> tuple:
        ...
    def GetGPUSharedMemoryRange(self) -> typing.Any:
        ...
    def GetGPUTemperatureRange(self) -> tuple:
        ...
    def GetGPUTotalBoardPowerRange(self) -> tuple:
        ...
    def GetGPUUsageRange(self) -> tuple:
        ...
    def GetGPUVRAMClockSpeedRange(self) -> tuple:
        ...
    def GetGPUVRAMRange(self) -> tuple:
        ...
    def GetGPUVoltageRange(self) -> tuple:
        ...
    def IsSupportedGPUClockSpeed(self) -> bool:
        ...
    def IsSupportedGPUFanSpeed(self) -> bool:
        ...
    def IsSupportedGPUHotspotTemperature(self) -> bool:
        ...
    def IsSupportedGPUIntakeTemperature(self) -> bool:
        ...
    def IsSupportedGPUPower(self) -> bool:
        ...
    def IsSupportedGPUTemperature(self) -> bool:
        ...
    def IsSupportedGPUTotalBoardPower(self) -> bool:
        ...
    def IsSupportedGPUUsage(self) -> bool:
        ...
    def IsSupportedGPUVRAM(self) -> bool:
        ...
    def IsSupportedGPUVRAMClockSpeed(self) -> bool:
        ...
    def IsSupportedGPUVoltage(self) -> bool:
        ...
    def __init__(self) -> None:
        ...
class IADLXGPUMetricsSupport2:
    def GetGPUSharedMemoryRange(self) -> tuple:
        ...
    def IsSupportedGPUSharedMemory(self) -> bool:
        ...
class IADLXPerformanceMonitoringServices:
    def ClearPerformanceMetricsHistory(self) -> ADLX_RESULT:
        ...
    def GetCurrentGPUMetrics(self, arg0: typing.Any) -> IADLXGPUMetrics:
        ...
    def GetCurrentGPUMetrics2(self, arg0: typing.Any) -> typing.Any:
        ...
    def GetCurrentPerformanceMetricsHistorySize(self) -> int:
        ...
    def GetMaxPerformanceMetricsHistorySize(self) -> int:
        ...
    def GetMaxPerformanceMetricsHistorySizeRange(self) -> tuple:
        ...
    def GetSamplingInterval(self) -> int:
        ...
    def GetSamplingIntervalRange(self) -> tuple:
        ...
    def GetSupportedGPUMetrics(self, arg0: typing.Any) -> IADLXGPUMetricsSupport:
        ...
    def GetSupportedGPUMetrics2(self, arg0: typing.Any) -> typing.Any:
        ...
    def Release(self) -> int:
        ...
    def SetMaxPerformanceMetricsHistorySize(self, arg0: typing.SupportsInt) -> ADLX_RESULT:
        ...
    def SetSamplingInterval(self, arg0: typing.SupportsInt) -> ADLX_RESULT:
        ...
    def StartPerformanceMetricsTracking(self) -> ADLX_RESULT:
        ...
    def StopPerformanceMetricsTracking(self) -> ADLX_RESULT:
        ...
    def __init__(self) -> None:
        ...
class IADLXSystem:
    def GetDisplaysServices(self) -> ...:
        ...
    def GetGPUByIndex(self, arg0: typing.SupportsInt) -> ...:
        ...
    def GetGPUs(self) -> list[...]:
        ...
    def GetGPUsEx(self) -> typing.Any:
        ...
    def GetNumberOfGPUs(self) -> int:
        ...
    def GetPerformanceMonitoringServices(self) -> ...:
        ...
    def __init__(self) -> None:
        ...
ADLX_ADL_INIT_ERROR: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_ADL_INIT_ERROR: 8>
ADLX_ALREADY_ENABLED: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_ALREADY_ENABLED: 1>
ADLX_ALREADY_INITIALIZED: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_ALREADY_INITIALIZED: 2>
ADLX_BAD_VER: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_BAD_VER: 5>
ADLX_FAIL: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_FAIL: 3>
ADLX_INVALID_ARGS: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_INVALID_ARGS: 4>
ADLX_INVALID_OBJECT: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_INVALID_OBJECT: 10>
ADLX_NOT_FOUND: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_NOT_FOUND: 9>
ADLX_NOT_SUPPORTED: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_NOT_SUPPORTED: 12>
ADLX_OK: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_OK: 0>
ADLX_ORPHAN_OBJECTS: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_ORPHAN_OBJECTS: 11>
ADLX_TERMINATED: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_TERMINATED: 7>
ADLX_UNKNOWN_INTERFACE: ADLX_RESULT  # value = <ADLX_RESULT.ADLX_UNKNOWN_INTERFACE: 6>
DISPLAY_CONTYPE_COMPOSITE: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_COMPOSITE: 12>
DISPLAY_CONTYPE_CVDONGLE_JPN: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_JPN: 5>
DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NONI2C_JPN: 6>
DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NONI2C_NTSC: 7>
DISPLAY_CONTYPE_CVDONGLE_NTSC: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_CVDONGLE_NTSC: 4>
DISPLAY_CONTYPE_DISPLAYPORT: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DISPLAYPORT: 14>
DISPLAY_CONTYPE_DVI_D: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DVI_D: 2>
DISPLAY_CONTYPE_DVI_I: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_DVI_I: 3>
DISPLAY_CONTYPE_EDP: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_EDP: 15>
DISPLAY_CONTYPE_HDMI_TYPE_A: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_HDMI_TYPE_A: 9>
DISPLAY_CONTYPE_HDMI_TYPE_B: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_HDMI_TYPE_B: 10>
DISPLAY_CONTYPE_RCA_3COMPONENT: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_RCA_3COMPONENT: 13>
DISPLAY_CONTYPE_SVIDEO: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_SVIDEO: 11>
DISPLAY_CONTYPE_UNKNOWN: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_UNKNOWN: 0>
DISPLAY_CONTYPE_USB_TYPE_C: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_USB_TYPE_C: 17>
DISPLAY_CONTYPE_VGA: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_VGA: 1>
DISPLAY_CONTYPE_WIRELESSDISPLAY: ADLX_DISPLAY_CONNECTOR_TYPE  # value = <ADLX_DISPLAY_CONNECTOR_TYPE.DISPLAY_CONTYPE_WIRELESSDISPLAY: 16>
DISPLAY_TYPE_COMPONENT_VIDEO: ADLX_DISPLAY_TYPE  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_COMPONENT_VIDEO: 5>
DISPLAY_TYPE_DIGITAL_FLAT_PANEL: ADLX_DISPLAY_TYPE  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_DIGITAL_FLAT_PANEL: 4>
DISPLAY_TYPE_LCD_PANEL: ADLX_DISPLAY_TYPE  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_LCD_PANEL: 3>
DISPLAY_TYPE_MONITOR: ADLX_DISPLAY_TYPE  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_MONITOR: 1>
DISPLAY_TYPE_PROJECTOR: ADLX_DISPLAY_TYPE  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_PROJECTOR: 6>
DISPLAY_TYPE_TELEVISION: ADLX_DISPLAY_TYPE  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_TELEVISION: 2>
DISPLAY_TYPE_UNKOWN: ADLX_DISPLAY_TYPE  # value = <ADLX_DISPLAY_TYPE.DISPLAY_TYPE_UNKOWN: 0>
IID_IADLXGPUMetrics2: str = 'IADLXGPUMetrics2'
IID_IADLXGPUMetricsSupport2: str = 'IADLXGPUMetricsSupport2'
INTERLACED: ADLX_DISPLAY_SCAN_TYPE  # value = <ADLX_DISPLAY_SCAN_TYPE.INTERLACED: 1>
PROGRESSIVE: ADLX_DISPLAY_SCAN_TYPE  # value = <ADLX_DISPLAY_SCAN_TYPE.PROGRESSIVE: 0>
IADLXGPUListFacade = IADLXGPUList
